openapi: 3.0.3
info:
  version: '0.1.0'
  title: 'Library API'
  description: 'Library API'
servers:
  - url: https://localhost:3001/
paths:
  /users:
    get:
      tags:
        - 'users'
      summary: 'ユーザ一覧の取得'
      description: 'ユーザ一覧を返す'
      responses:
        '200':
          description: '正常'
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - users
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/user'
    post:
      tags:
        - 'users'
      summary: 'ユーザーの登録'
      description: 'ユーザ一を登録する'
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              type: object
              required:
                - name
                - email
                - role_type
                - joining_date
              properties:
                name:
                  type: string
                  example: 'mike'
                email:
                  type: string
                  example: 'mike@example.com'
                role_type:
                  $ref: '#/components/schemas/role_type'
                joining_date:
                  type: string
                  example: '2022-05-15'
      responses:
        '201':
          description: '正常'
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - users
                properties:
                  users:
                    type: object
                    $ref: '#/components/schemas/user'
        '422':
          description: 'validation error'
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/422_error'
  /users/{userId}:
    get:
      tags:
        - 'users'
      summary: 'ユーザの取得'
      description: 'ユーザ1件を返す'
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: '正常'
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - users
                properties:
                  users:
                    type: object
                    $ref: '#/components/schemas/user'
    put:
      tags:
        - 'users'
      summary: 'ユーザーの更新'
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
            example: 1
      description: 'ユーザ一を更新する'
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              type: object
              required:
                - id
                - name
                - email
                - role_type
                - joining_date
              properties:
                id:
                  type: integer
                  example: 1
                name:
                  type: string
                  example: 'mike'
                email:
                  type: string
                  example: 'mike@example.com'
                role_type:
                  $ref: '#/components/schemas/role_type'
                joining_date:
                  type: string
                  example: '2022-05-15'
      responses:
        '200':
          description: '正常'
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - users
                properties:
                  users:
                    type: object
                    $ref: '#/components/schemas/user'
        '422':
          description: 'validation error'
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/422_error'
  /users/{userId}/reviews:
    get:
      tags:
        - 'reviews'
      summary: 'あるユーザのレビュー一覧取得'
      description: 'あるユーザのレビュー一覧取得を返す'
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: '正常'
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - reviews
                properties:
                  reviews:
                    type: array
                    items:
                      $ref: '#/components/schemas/review'
  /users/{userId}/rental_histories:
    get:
      tags:
        - 'rental_histories'
      summary: 'あるユーザのレンタル履歴'
      description: 'あるユーザのレンタル履歴を返す'
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: '正常'
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - rental_histories
                properties:
                  rental_histories:
                    type: array
                    items:
                      $ref: '#/components/schemas/rental_history'
    post:
      tags:
        - 'rental_histories'
      summary: 'ユーザーのレンタル履歴の登録'
      description: 'ユーザ一をレンタル履歴を登録する'
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              type: object
              required:
                - user_id
                - book_id
                - start_date
                - return_date
              properties:
                user_id:
                  type: integer
                  example: 1
                book_id:
                  type: integer
                  example: 1
                start_date:
                  type: string
                  example: '2022-04-16'
                return_date:
                  type: string
                  example: '2022-04-30'
      responses:
        '201':
          description: '正常'
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - users
                properties:
                  rental_histories:
                    type: object
                    $ref: '#/components/schemas/rental_history'
        '422':
          description: 'validation error'
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/422_error'

  /books:
    get:
      tags:
        - 'books'
      summary: '本の一覧の取得'
      description: '本の一覧を返す'
      responses:
        '200':
          description: '正常'
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - books
                properties:
                  books:
                    type: array
                    items:
                      $ref: '#/components/schemas/book'
    post:
      tags:
        - 'books'
      summary: '本の登録'
      description: '本を登録する'
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              type: object
              required:
                - title
                - description
                - published
                - rent
                - return_date
                - categories
              properties:
                title:
                  type: string
                  example: 'java professional'
                description:
                  type: string
                  example: 'this book for the programer that want to be java programmer'
                published:
                  type: string
                  example: '2022-04-31'
                rent:
                  type: boolean
                  description: '借りられているか'
                  example: true
                return_date:
                  type: string
                  description: '返却予定日'
                  example: '2022-05-20'
                  nullable: true
                categories:
                  type: array
                  items:
                    type: object
                    required:
                      - category_id
                    properties:
                      category_id:
                        type: integer
                        example: 1
      responses:
        '201':
          description: '正常'
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - users
                properties:
                  books:
                    type: object
                    $ref: '#/components/schemas/book'
        '422':
          description: 'validation error'
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/422_error'
  /books/{bookId}:
    get:
      tags:
        - 'books'
      summary: '本の取得'
      description: '本1件を返す'
      parameters:
        - in: path
          name: bookId
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: '正常'
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - books
                properties:
                  books:
                    type: object
                    $ref: '#/components/schemas/book'
    delete:
      tags:
        - 'books'
      summary: '本の削除'
      description: '本を削除'
      parameters:
        - in: path
          name: bookId
          description: '本のid'
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '204':
          description: '正常'
        '404':
          description: |
            - idの指定がない場合
            - 指定のidの本が存在しない場合
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/404_error'
  /books/{bookId}/reviews:
    get:
      tags:
        - 'reviews'
      summary: 'ある本につけられたレビュー一覧の取得'
      description: 'ある本につけられたレビュー一覧の取得を返す'
      parameters:
        - in: path
          name: bookId
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: '正常'
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - reviews
                properties:
                  reviews:
                    type: array
                    items:
                      $ref: '#/components/schemas/review'
    post:
      tags:
        - 'reviews'
      summary: 'ある本にレビューを登録する'
      description: 'ある本にレビューを登録'
      parameters:
        - in: path
          name: bookId
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              type: object
              required:
                - book_id
                - user_id
                - title
                - content
                - rating
                - date
              properties:
                book_id:
                  type: integer
                  example: 1
                user_id:
                  type: integer
                  example: 1
                title:
                  type: string
                  example: 'java'
                content:
                  type: string
                  example: |
                    this book gives me beneficial information. Especially what and how to use OOP
                rating:
                  type: integer
                  example: 4
                  minimum: 1
                  maximum: 5
                date:
                  type: string
                  example: '2022-04-15'
      responses:
        '201':
          description: '正常'
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - users
                properties:
                  reviews:
                    type: object
                    $ref: '#/components/schemas/review'
        '422':
          description: 'validation error'
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/422_error'

  /categories:
    get:
      tags:
        - 'categories'
      summary: 'カテゴリーの一覧の取得'
      description: 'カテゴリーの一覧を返す'
      responses:
        '200':
          description: '正常'
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - categories
                properties:
                  categories:
                    type: array
                    items:
                      $ref: '#/components/schemas/category'
    post:
      tags:
        - 'categories'
      summary: 'カテゴリーの登録'
      description: 'カテゴリーを登録する'
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: 'java'
      responses:
        '201':
          description: '正常'
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - users
                properties:
                  categories:
                    type: object
                    $ref: '#/components/schemas/category'
        '422':
          description: 'validation error'
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/422_error'
  /categories/{categoryId}/:
    delete:
      tags:
        - 'categories'
      summary: 'カテゴリーの削除'
      description: 'カテゴリーを削除'
      parameters:
        - in: path
          name: categoryId
          description: 'カテゴリーのid'
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '204':
          description: '正常'
        '404':
          description: |
            - idの指定がない場合
            - 指定のidのカテゴリーが存在しない場合
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/404_error'
  /categories/{categoryId}/books:
    get:
      tags:
        - 'books'
      summary: 'あるカテゴリーの本の一覧の取得'
      description: 'あるカテゴリーの本の一覧を返す'
      parameters:
        - in: path
          name: categoryId
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: '正常'
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - books
                properties:
                  books:
                    type: array
                    items:
                      $ref: '#/components/schemas/book'

  /reviews/{reviewId}:
    put:
      tags:
        - 'reviews'
      summary: 'レビューの更新'
      description: 'レビューを更新する'
      parameters:
        - in: path
          name: reviewId
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              type: object
              required:
                - user_id
                - id
                - title
                - content
                - rating
                - date
              properties:
                user_id:
                  type: integer
                  example: 1
                id:
                  type: integer
                  example: 1
                title:
                  type: string
                  example: 'java'
                content:
                  type: string
                  example: |
                    this book gives me beneficial information. Especially what and how to use OOP
                rating:
                  type: integer
                  example: 4
                  minimum: 1
                  maximum: 5
                date:
                  type: string
                  example: '2022-04-15'
      responses:
        '200':
          description: '正常'
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - users
                properties:
                  reviews:
                    type: object
                    $ref: '#/components/schemas/review'
        '422':
          description: 'validation error'
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/422_error'
    delete:
      tags:
        - 'reviews'
      summary: 'レビューの削除'
      description: 'レビューを削除'
      parameters:
        - name: 'reviewId'
          in: path
          description: 'レビューのid'
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '204':
          description: '正常'
        '404':
          description: |
            - idの指定がない場合
            - 指定のidのレビューが存在しない場合
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/404_error'
  /reviews/{reviewId}/comments:
    get:
      tags:
        - 'comments'
      summary: 'あるレビューに寄せられたコメントの一覧の取得'
      description: 'あるレビューに寄せられたコメントの一覧の取得を返す'
      parameters:
        - in: path
          name: reviewId
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: '正常'
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - comments
                properties:
                  comments:
                    type: array
                    items:
                      $ref: '#/components/schemas/comment'
    post:
      tags:
        - 'comments'
      summary: 'あるレビューにコメントを登録する'
      description: 'あるレビューにコメントを登録'
      parameters:
        - in: path
          name: reviewId
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              type: object
              required:
                - user_id
                - review_id
                - content
                - favorite_count
                - date
                - edited
              properties:
                user_id:
                  type: integer
                  example: 1
                review_id:
                  type: integer
                  example: 1
                content:
                  type: string
                  example: |
                    I'm just looking for OOP learning book. I'll rent next!
                date:
                  type: string
                  description: |
                    コメントを記載した日
                    コメントを更新した場合は日付も更新される
                  example: '2022-04-17'
      responses:
        '201':
          description: '正常'
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - users
                properties:
                  comments:
                    type: object
                    $ref: '#/components/schemas/comment'
        '422':
          description: 'validation error'
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/422_error'
  /comments/{commentId}:
    put:
      tags:
        - 'comments'
      summary: 'コメントの更新'
      parameters:
        - in: path
          name: commentId
          required: true
          schema:
            type: integer
            example: 1
      description: 'コメントを更新する'
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              type: object
              required:
                - user_id
                - review_id
                - content
                - favorite_count
                - date
                - edited
              properties:
                user_id:
                  type: integer
                  example: 1
                content:
                  type: string
                  example: |
                    I'm just looking for OOP learning book. I'll rent next!
                date:
                  type: string
                  description: |
                    コメントを記載した日
                    コメントを更新した場合は日付も更新される
                  example: '2022-04-17'
                edited:
                  type: boolean
                  description: '内容が更新されたか'
                  example: true
      responses:
        '200':
          description: '正常'
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - users
                properties:
                  comments:
                    type: object
                    $ref: '#/components/schemas/comment'
        '422':
          description: 'validation error'
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/422_error'
    delete:
      tags:
        - 'comments'
      summary: 'コメントの削除'
      description: 'コメントを削除'
      parameters:
        - in: path
          name: commentId
          description: 'コメントのid'
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '204':
          description: '正常'
        '404':
          description: |
            - idの指定がない場合
            - 指定のidのコメントが存在しない場合
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/404_error'
  # /comments/{commentId}/favorite_count:
    # patch:

components:
  schemas:
    user:
      type: object
      required:
        - id
        - name
        - email
        - role_type
        - joining_date
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'mike'
        email:
          type: string
          example: 'mike@example.com'
        role_type:
          $ref: '#/components/schemas/role_type'
        joining_date:
          type: string
          example: '2022-05-15'

    book:
      type: object
      required:
        - id
        - title
        - description
        - published
        - rent
        - return_date
        - categories
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: 'java professional'
        description:
          type: string
          example: 'this book for the programer that want to be java programmer'
        published:
          type: string
          example: '2022-04-31'
        rent:
          type: boolean
          description: '借りられているか'
          example: true
        return_date:
          type: string
          description: '返却予定日'
          example: '2022-05-20'
          nullable: true
        categories:
          type: array
          items:
            $ref: '#/components/schemas/category'

    category:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'java'

    review:
      type: object
      required:
        - id
        - title
        - content
        - rating
        - date
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: 'java'
        content:
          type: string
          example: |
            this book gives me beneficial information. Especially what and how to use OOP
        rating:
          type: integer
          example: 4
          minimum: 1
          maximum: 5
        date:
          type: string
          example: '2022-04-15'

    comment:
      type: object
      required:
        - id
        - user_name
        - review_id
        - content
        - favorite_count
        - date
        - edited
      properties:
        id:
          type: integer
          example: 1
        user_name:
          type: string
          example: 'mike'
        review_id:
          type: integer
          example: 1
        content:
          type: string
          example: |
            I'm just looking for OOP learning book. I'll rent next!
        favorite_count:
          type: integer
          description: |
            いいね数
            誰がいいねしたか、1人1回までなどを制御する場合は別テーブルに切り出す
          example: 3
        date:
          type: string
          description: |
            コメントを記載した日
            コメントを更新した場合は日付も更新される
          example: '2022-04-17'
        edited:
          type: boolean
          description: '内容が更新されたか'
          example: false
          default: false

    rental_history:
      type: object
      required:
        - id
        - user_id
        - book_id
        - start_date
        - return_date
        - book_title
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        book_id:
          type: integer
          example: 1
        start_date:
          type: string
          example: '2022-04-16'
        return_date:
          type: string
          example: '2022-04-30'
        book_title:
          type: string
          example: 'java professional'

    role_type:
      type: string
      enum:
        - 'admin'
        - 'user'

    404_error:
      type: object
      properties:
        message:
          type: string
          example: 'not found error'
    422_error:
      type: object
      properties:
        message:
          type: string
          example: 'validation error'
